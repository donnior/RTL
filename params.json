{"tagline":"RTL means R-tag library. It's a tag library for JSP.","note":"Don't delete this file! It's used internally to help with page regeneration.","body":"There are three category tags in the package:\r\n\r\n* Template Tags\r\n* Paginate Tags\r\n* Html Tags\r\n\r\n# Installation\r\n\r\nCurrently you need to install the artifact manually\r\n\r\n1. `git clone git://github.com/donnior/RTL.git`\r\n2. `mvn install`\r\n\r\nAdd dependency in maven to use it.\r\n\r\n```xml\r\n<dependency>\r\n    <groupId>me.donnior</groupId>\r\n    <artifactId>rtl</artifactId>\r\n    <version>0.1</version>\r\n</dependency>\r\n```\r\n\r\n# Templating Tags\r\n\r\n## How to use\r\n\r\nSet the template page in web.xml, make sure the param name is `RTLTempatePage`; if not, RTL will use the default template page which is <code>WEB-INF/views/layout/template.jsp</code>\r\n\r\n```xml\r\n<context-param>\r\n    <param-name>RTLTempatePage</param-name>\r\n    <param-value>/WEB-INF/views/layout/template.jsp</param-value>\r\n</context-param>\r\n```\r\n\r\nDefine your template page\r\n\r\n```html\r\n<%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%>\r\n<%@ taglib prefix=\"r\" uri=\"r-tag\"%>\r\n\r\n<!DOCTYPE html>\r\n<html>\r\n<head>\r\n<meta charset=\"utf-8\" />\r\n<r:yieldTitle prefix=\"Gloable Title | \"></r:yieldTitle>\r\n\r\n<link rel=\"stylesheet\" href=\"style.css\" type=\"text/css\" media=\"screen\" />\r\n\r\n<r:yieldStylesheets></r:yieldStylesheets>\r\n\r\n<script type=\"text/javascript\" src=\"jquery-1.7.2.min.js\" ></script>\r\n\r\n<r:yieldJavascripts />\r\n\r\n</head>\r\n<body>\r\n    <div id=\"body\">\r\n        <div id=\"sidebar\">\r\n                \r\n        </div>\r\n        \r\n        <div id=\"main\">\r\n            <div class=\"content\" >\r\n                <r:yieldBody></r:yieldBody>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</body>\r\n</html>\r\n```\r\n\r\nUse the template in your every page needed to be templated. Like this:\r\n\r\n```html\r\n<%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\"\r\n    pageEncoding=\"UTF-8\"%>\r\n\r\n<%@ taglib prefix=\"r\" tagdir=\"r-tag\"%>\r\n\r\n<r:stylesheet name=\"/resources/styles/input.css\"></r:javascript>\r\n\r\n<r:javascript name=\"/resources/js/input.js\"></r:javascript>\r\n\r\n<r:layout title=\"title for this page\">\r\n    <h3>page title</h3>\r\n    <ul><li>...</li></ul>   \r\n</r:layout>\r\n```\r\n\r\n## Tags Explain\r\n\r\n* yieldTitle       \r\n    `Used in template page, can set the single page's title`\r\n* yieldStylesheets  \r\n    `Used in template page, add the page specific style`\r\n* yieldJavascripts  \r\n    `Used in template page, add the page specific javascript`\r\n* yieldBody  \r\n    `Used in template page, output the your templated page`\r\n* layout  \r\n    `Used in templated page, declare current page needs templated`\r\n* stylesheet  \r\n    `Used in templated page, specify one stylesheet which needed by current page`\r\n* javascript  \r\n    `Used in templated page, specify one javascript which needed by current page`\r\n\r\n# Paginate Tags  \r\n\r\n## How to use\r\n\r\nSet the i18n resouces needed by the paginate tag, this step is required.\r\n\r\n    default.paginate.label.previous = Previous Page\r\n    default.paginate.label.next = Next Page\r\n\r\nUse the PaginateSupportArray to wrap your normal List which will be used on the paginating page.\r\n```java\r\npublic List<User> listAllUsers(int page, int pageSize){\r\n    List<User> users = // get record from database\r\n    int total = //count from database\r\n    PaginateSupportArray list = new PaginateSupportArray(users);\r\n    list.setTotal(total);\r\n    list.setPage(page);\r\n    list.setPageSize(pageSize);\r\n    return list;\r\n}\r\n```\r\n\r\nUse the wrapped List in jsp\r\n```xml\r\n<r:paginate data=\"${results}\" />\r\n```\r\n\r\n## Customize Style\r\n\r\nThe paginate tag will generate the following html code without any specific styles, you can set styles in your css file.\r\n```html\r\n<div class=\"pagination\">\r\n    <a href=\"/xxx?page=9\" title=\"Next Page\" class=\"label pre\">Previous Page</a>\r\n    <a href=\"/xxx?page=10\" class=\"number current\">10</a>  \r\n    <span>...</span>\r\n    <a href=\"/xxx?page=31\" class=\"number\">31</a>\r\n    <a href=\"/xxx?page=11\" title=\"Next Page\" class=\"label next\">Next Page</a>\r\n</div>\r\n```\r\n\r\n## Paginate Tag's attributes explain\r\n\r\n<table>\r\n    <tr>\r\n        <th>Attribute Name</th><th>Required</th><th>Usage</th><th>Note</th>\r\n    </tr>\r\n    <tr><td>data</td><td>Y</td><td>the data list which got pagination info from</td><td>the data object must be an instance of PaginateSupportArray</td></tr>\r\n    <tr><td>path</td><td>N</td><td>customzied url for links in the pagination</td><td>RTL will get it automaticly if it's not given.</td></tr>\r\n    <tr><td>pageVar</td><td>N</td><td>the variable name which identify the page info</td><td>default is \"page\"</td></tr>\r\n    <tr><td>preLabel</td><td>N</td><td>the text will be displayed as the previous page link label</td><td>got from i18n if not setted</td></tr>\r\n    <tr><td>nextLabel</td><td>N</td><td>the text will be displayed as the next page link label</td><td>got from i18n if not setted</td></tr>\r\n</table>\r\n\r\n# Html Tags\r\n\r\n* a\r\n* table\r\n\r\nBoth tags support dynamic attributes like css, id ...\r\n\r\n## &lt;r:a&gt;\r\n\r\nUse `a` tag to create html link. It's a replacement of JSTL's `<c:url>`\r\n\r\n### Example\r\n```html\r\n<r:a class=\"link_a\" href=\"/user/${user.id}\">${user.login}</r:a>\r\n```\r\n\r\n## &lt;r:table&gt; & &lt;r:col&gt;\r\n\r\nRTL's `table` tag is a very simple solution for rendering data table. If you want more powerful solution, the [Display Tag](http://www.displaytag.org/) is a recommendation.\r\n\r\nUse `<r:table>` and `<r:col>` to define a data table.\r\n\r\n### Example\r\n\r\n```html\r\n<r:table data=\"${users}\" var=\"user\" id=\"tbl_1\" class=\"table\">\r\n  <r:col headerKey=\"user.login.label\" >\r\n    <r:a class=\"link_a\" href=\"/user/${user.id}\">${user.login}</r:a>\r\n  </r:col>\r\n  <r:col header=\"Mail\">${user.email}</r:col>\r\n  <r:col header=\"Operation\"></r:col>\r\n</r:table>\r\n```","name":"Rtl","google":""}